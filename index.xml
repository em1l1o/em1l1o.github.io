<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emilio&#39;s Murmurs</title>
    <link>https://em1l1o.github.io/</link>
    <description>Recent content on Emilio&#39;s Murmurs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 00:09:21 +0800</lastBuildDate>
    
	<atom:link href="https://em1l1o.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>实例内存泄露追溯</title>
      <link>https://em1l1o.github.io/posts/trace_down_a_memory_leak_issue/</link>
      <pubDate>Tue, 15 Sep 2020 00:09:21 +0800</pubDate>
      
      <guid>https://em1l1o.github.io/posts/trace_down_a_memory_leak_issue/</guid>
      <description>背景 最近几天的生产环境实例内存使用频繁报警，登录 AWS 查看最近一个月内存使用的走向：
最近一个月（甚至更久）以来，内存的使用量是不断上涨的，直到这几天逼近了报警阈值。
这种情况在测试环境发生已久，测试环境的内存经常报警，原因是定时任务无法正常结束，时间一长就占用了越来越多的内存。
测试环境的经验在前，登录生产环境后，先查看当前进程。果然发现在 CROND 进程下跑了很多子进程，都是 rails 中 schedule 跑的各种定时任务。一般来说，这些任务运行时间基本都在几秒左右，几秒后进程便结束了。
而当前这些进程有的竟然在几个月前就启动了。
因为一直没有时间去深挖内在的原因，一直以来的做法就是 kill 卡死的进程就完了。而这次想要彻底解决这个问题。
定位问题 当看到进程卡死，第一想法是 zombie。
ps -e uf 显示所有卡住的进程均为 Sleep 状态。
再进一步查看其父进程的系统调用
sudo strace -p 其父进程所处进程调用均为 wait4()，即指定的子进程只要退出，其占用的资源就会被立即释放，子进程的 entry point 也不会再出现在进程表中。
因此卡死的进程并非 zombie。
再次查看子进程所处的系统调用，发现所有的进程都是卡在了
futex(0xAddress, FUTEX_WAIT_PRIVATE, ...)
 Futex是一种用户态和内核态混合的同步机制。首先，同步的进程间通过 mmap 共享一段内存，futex 变量就位于这段共享的内存中且操作是原子的，当进程尝试进入互斥区或者退出互斥区的时候，先去查看共享内存中的 futex 变量，如果没有竞争发生，则只修改 futex，而不用再执行系统调用了。而当通过访问 futex 变量告诉进程有竞争发生，则还是得执行系统调用去完成相应的处理。简单的说，futex 就是通过在用户态的检查，如果了解到没有竞争就不用陷入内核了，减少了不必要的系统调用，大大提高了系统效率。参考文章
 这里就奇怪了，因为执行的定时任务并没有涉及到线程相关操作，且通过 crontab 写入的定时任务运行一切正常，卡住的全是 rails 里 schedule 写入的定时任务。于是搜索范围可以缩小到 rails 上了。
rails 的定时任务是由 gem whenever 写入 cron 来实现的，就可以执行定时任务这一点来说，whenever 是可以被排除嫌疑的。那么就需要看看定时任务具体执行的命令了。</description>
    </item>
    
    <item>
      <title>处理 AWS 分离 IAM Role 失败</title>
      <link>https://em1l1o.github.io/posts/fix_iam_role_detachment_issue/</link>
      <pubDate>Mon, 14 Sep 2020 22:46:04 +0800</pubDate>
      
      <guid>https://em1l1o.github.io/posts/fix_iam_role_detachment_issue/</guid>
      <description>背景 发现 sentry 实例已经有几天的实例监控数据缺失。登录实例进行检查，手动触发监控脚本，监控数据发送失败，请求响应显示：
The security token included in the request is expired
由于调用 AWS 的服务、资源等都是需要对应权限（security credential）的，管理权限的方式之一便是绑定 IAM 角色来代替我们进行管理（我们现在的方式）。
实例中 security credential 都是临时的凭证，有效时间很短。与实例绑定的 IAM 角色会在凭证过期之前（至少在过期前 5 分钟）自动刷新凭证。
所以出现这样的响应可能是 IAM 角色出现了问题。
定位问题 在实例中使用如下方式来查看实例的 security credential
curl http://169.254.169.254/latest/meta-data/iam/security-credentials/EC2-individual-role 果然，在返回的响应中，Expiration 已经是在几天前，并且 LastUpdated 同样也是在几天前。
IAM 角色出问题了。
接下来先尝试了在 AWS Console 分离实例的 IAM 角色
确认分离后，AWS 显示分离成功。
接下来给实例绑定新建的 IAM 角色，绑定失败。响应如下：
The association &amp;lt;AssociationId&amp;gt; is not the active association.
使用 AWS CLI 查看当前所有实例的 IAM 文件配置关联
aws ec2 describe-iam-instance-profile-associations 发现与问题实例绑定的 AssociationId 的 State 一直处于 disassociating 状态。</description>
    </item>
    
  </channel>
</rss>